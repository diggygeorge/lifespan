# -*- coding: utf-8 -*-
"""Lifespan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_h-r0uYJjaysr6f_SA-j9oZRbV8xH9-P
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

# Make NumPy printouts easier to read.
np.set_printoptions(precision=3, suppress=True)

import io
from google.colab import files
uploaded = files.upload()
test_dataset = pd.read_csv(io.BytesIO(uploaded['agetest.csv']))
train_dataset = pd.read_csv(io.BytesIO(uploaded['agetrain.csv']))

test_dataset.rename(columns = {'Blood Pressure (s/d)': 'Systolic Blood Pressure'}, inplace = True)
test_dataset["Diastolic Blood Pressure"] = test_dataset['Systolic Blood Pressure']

train_dataset.rename(columns = {'Blood Pressure (s/d)': 'Systolic Blood Pressure'}, inplace = True)
train_dataset["Diastolic Blood Pressure"] = train_dataset['Systolic Blood Pressure']

for i in range(len(test_dataset['Systolic Blood Pressure'])):
  test_dataset.loc[i, 'Diastolic Blood Pressure'] = int(test_dataset['Diastolic Blood Pressure'][i].split('/')[1])
  test_dataset.loc[i, 'Systolic Blood Pressure'] = int(test_dataset['Systolic Blood Pressure'][i].split('/')[0])
  train_dataset.loc[i, 'Diastolic Blood Pressure'] = int(train_dataset['Diastolic Blood Pressure'][i].split('/')[1])
  train_dataset.loc[i, 'Systolic Blood Pressure'] = int(train_dataset['Systolic Blood Pressure'][i].split('/')[0])

train_dataset.isna().sum()
test_dataset.isna().sum()

train_dataset = train_dataset.dropna()
test_dataset = test_dataset.dropna()

def isnan(x):
  return x != x

# Mapping for 'Alcohol Consumption'
test_dataset.loc[isnan(test_dataset['Alcohol Consumption']), 'Alcohol Consumption'] = 1
test_dataset.loc[test_dataset['Alcohol Consumption'] == 'Occasional', 'Alcohol Consumption'] = 2
test_dataset.loc[test_dataset['Alcohol Consumption'] == 'Frequent', 'Alcohol Consumption'] = 3

# Mapping for 'Chronic Diseases'
test_dataset.loc[test_dataset['Chronic Diseases'] == 'Heart Disease', 'Chronic Diseases'] = 1
test_dataset.loc[test_dataset['Chronic Diseases'] == 'Hypertension', 'Chronic Diseases'] = 2
test_dataset.loc[test_dataset['Chronic Diseases'] == 'Diabetes', 'Chronic Diseases'] = 3

# Mapping for 'Physical Activity Level'
test_dataset.loc[test_dataset['Physical Activity Level'] == 'Low', 'Physical Activity Level'] = 1
test_dataset.loc[test_dataset['Physical Activity Level'] == 'Moderate', 'Physical Activity Level'] = 2
test_dataset.loc[test_dataset['Physical Activity Level'] == 'High', 'Physical Activity Level'] = 3

# Mapping for 'Smoking Status'
test_dataset.loc[test_dataset['Smoking Status'] == 'Never', 'Smoking Status'] = 1
test_dataset.loc[test_dataset['Smoking Status'] == 'Former', 'Smoking Status'] = 2
test_dataset.loc[test_dataset['Smoking Status'] == 'Current', 'Smoking Status'] = 3

# Mapping for 'Diet'
test_dataset.loc[test_dataset['Diet'] == 'Balanced', 'Diet'] = 1
test_dataset.loc[test_dataset['Diet'] == 'Vegetarian', 'Diet'] = 2
test_dataset.loc[test_dataset['Diet'] == 'Low-carb', 'Diet'] = 3
test_dataset.loc[test_dataset['Diet'] == 'High-fat', 'Diet'] = 4

# Mapping for 'Gender'
test_dataset.loc[test_dataset['Gender'] == 'Male', 'Gender'] = 1
test_dataset.loc[test_dataset['Gender'] == 'Female', 'Gender'] = 2

# Mapping for 'Medication Use'
test_dataset.loc[isnan(test_dataset['Medication Use']), 'Medication Use'] = 1
test_dataset.loc[test_dataset['Medication Use'] == 'Occasional', 'Medication Use'] = 2
test_dataset.loc[test_dataset['Medication Use'] == 'Regular', 'Medication Use'] = 3

# Mapping for 'Family History'
test_dataset.loc[isnan(test_dataset['Family History']), 'Family History'] = 1
test_dataset.loc[test_dataset['Family History'] == 'Heart Disease', 'Family History'] = 2
test_dataset.loc[test_dataset['Family History'] == 'Hypertension', 'Family History'] = 3
test_dataset.loc[test_dataset['Family History'] == 'Diabetes', 'Family History'] = 4

# Mapping for 'Mental Health Status'
test_dataset.loc[test_dataset['Mental Health Status'] == 'Poor', 'Mental Health Status'] = 1
test_dataset.loc[test_dataset['Mental Health Status'] == 'Fair', 'Mental Health Status'] = 2
test_dataset.loc[test_dataset['Mental Health Status'] == 'Good', 'Mental Health Status'] = 3
test_dataset.loc[test_dataset['Mental Health Status'] == 'Excellent', 'Mental Health Status'] = 4

# Mapping for 'Sleep Patterns'
test_dataset.loc[test_dataset['Sleep Patterns'] == 'Insomnia', 'Sleep Patterns'] = 1
test_dataset.loc[test_dataset['Sleep Patterns'] == 'Normal', 'Sleep Patterns'] = 2
test_dataset.loc[test_dataset['Sleep Patterns'] == 'Excessive', 'Sleep Patterns'] = 3

# Mapping for 'Education Level'
test_dataset.loc[test_dataset['Education Level'] == 'High School', 'Education Level'] = 1
test_dataset.loc[test_dataset['Education Level'] == 'Undergraduate', 'Education Level'] = 2
test_dataset.loc[test_dataset['Education Level'] == 'Postgraduate', 'Education Level'] = 3

# Mapping for 'Income Level'
test_dataset.loc[test_dataset['Income Level'] == 'Low', 'Income Level'] = 1
test_dataset.loc[test_dataset['Income Level'] == 'Medium', 'Income Level'] = 2
test_dataset.loc[test_dataset['Income Level'] == 'High', 'Income Level'] = 3

# Mapping for 'Alcohol Consumption' in train_dataset
train_dataset.loc[isnan(train_dataset['Alcohol Consumption']), 'Alcohol Consumption'] = 1
train_dataset.loc[train_dataset['Alcohol Consumption'] == 'Occasional', 'Alcohol Consumption'] = 2
train_dataset.loc[train_dataset['Alcohol Consumption'] == 'Frequent', 'Alcohol Consumption'] = 3

# Mapping for 'Chronic Diseases' in train_dataset
train_dataset.loc[train_dataset['Chronic Diseases'] == 'Heart Disease', 'Chronic Diseases'] = 1
train_dataset.loc[train_dataset['Chronic Diseases'] == 'Hypertension', 'Chronic Diseases'] = 2
train_dataset.loc[train_dataset['Chronic Diseases'] == 'Diabetes', 'Chronic Diseases'] = 3

# Mapping for 'Physical Activity Level' in train_dataset
train_dataset.loc[train_dataset['Physical Activity Level'] == 'Low', 'Physical Activity Level'] = 1
train_dataset.loc[train_dataset['Physical Activity Level'] == 'Moderate', 'Physical Activity Level'] = 2
train_dataset.loc[train_dataset['Physical Activity Level'] == 'High', 'Physical Activity Level'] = 3

# Mapping for 'Smoking Status' in train_dataset
train_dataset.loc[train_dataset['Smoking Status'] == 'Never', 'Smoking Status'] = 1
train_dataset.loc[train_dataset['Smoking Status'] == 'Former', 'Smoking Status'] = 2
train_dataset.loc[train_dataset['Smoking Status'] == 'Current', 'Smoking Status'] = 3

# Mapping for 'Diet' in train_dataset
train_dataset.loc[train_dataset['Diet'] == 'Balanced', 'Diet'] = 1
train_dataset.loc[train_dataset['Diet'] == 'Vegetarian', 'Diet'] = 2
train_dataset.loc[train_dataset['Diet'] == 'Low-carb', 'Diet'] = 3
train_dataset.loc[train_dataset['Diet'] == 'High-fat', 'Diet'] = 4

# Mapping for 'Gender' in train_dataset
train_dataset.loc[train_dataset['Gender'] == 'Male', 'Gender'] = 1
train_dataset.loc[train_dataset['Gender'] == 'Female', 'Gender'] = 2

# Mapping for 'Medication Use' in train_dataset
train_dataset.loc[isnan(train_dataset['Medication Use']), 'Medication Use'] = 1
train_dataset.loc[train_dataset['Medication Use'] == 'Occasional', 'Medication Use'] = 2
train_dataset.loc[train_dataset['Medication Use'] == 'Regular', 'Medication Use'] = 3

# Mapping for 'Family History' in train_dataset
train_dataset.loc[isnan(train_dataset['Family History']), 'Family History'] = 1
train_dataset.loc[train_dataset['Family History'] == 'Heart Disease', 'Family History'] = 2
train_dataset.loc[train_dataset['Family History'] == 'Hypertension', 'Family History'] = 3
train_dataset.loc[train_dataset['Family History'] == 'Diabetes', 'Family History'] = 4

# Mapping for 'Mental Health Status' in train_dataset
train_dataset.loc[train_dataset['Mental Health Status'] == 'Poor', 'Mental Health Status'] = 1
train_dataset.loc[train_dataset['Mental Health Status'] == 'Fair', 'Mental Health Status'] = 2
train_dataset.loc[train_dataset['Mental Health Status'] == 'Good', 'Mental Health Status'] = 3
train_dataset.loc[train_dataset['Mental Health Status'] == 'Excellent', 'Mental Health Status'] = 4

# Mapping for 'Sleep Patterns' in train_dataset
train_dataset.loc[train_dataset['Sleep Patterns'] == 'Insomnia', 'Sleep Patterns'] = 1
train_dataset.loc[train_dataset['Sleep Patterns'] == 'Normal', 'Sleep Patterns'] = 2
train_dataset.loc[train_dataset['Sleep Patterns'] == 'Excessive', 'Sleep Patterns'] = 3

# Mapping for 'Education Level' in train_dataset
train_dataset.loc[train_dataset['Education Level'] == 'High School', 'Education Level'] = 1
train_dataset.loc[train_dataset['Education Level'] == 'Undergraduate', 'Education Level'] = 2
train_dataset.loc[train_dataset['Education Level'] == 'Postgraduate', 'Education Level'] = 3

# Mapping for 'Income Level' in train_dataset
train_dataset.loc[train_dataset['Income Level'] == 'Low', 'Income Level'] = 1
train_dataset.loc[train_dataset['Income Level'] == 'Medium', 'Income Level'] = 2
train_dataset.loc[train_dataset['Income Level'] == 'High', 'Income Level'] = 3

train_features = train_dataset.copy()
test_features = test_dataset.copy()

train_labels = train_features.pop('Age (years)')

train_features['Chronic Diseases'].unique()

# Convert all columns to numeric, errors='coerce' will replace non-numeric values with NaN
for column in train_features.columns:
    train_features[column] = pd.to_numeric(train_features[column], errors='coerce')

normalizer = tf.keras.layers.Normalization(axis=-1)
normalizer.adapt(np.array(train_features))

linear_model = tf.keras.Sequential([
    layers.Input(shape=(train_features.shape[1],)),
    layers.Dense(256, activation='relu'),  # Increased units
    layers.Dense(128, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)  # Output layer for regression
])

linear_model.summary()

linear_model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss='mean_absolute_error')

history = linear_model.fit(
    train_features,
    train_labels,
    epochs=200,
    # Suppress logging.
    verbose=True,
    # Calculate validation results on 20% of the training data.
    validation_split = 0.2)

predicted_values = linear_model.predict(test_features)
plt.hist(predicted_values, bins=50)
plt.title("Distribution of Predicted Values")
plt.show()

# Predict the values
predictions = linear_model.predict(test_features)

# Create a DataFrame to store predictions alongside the original index
test_data_with_predictions = test_dataset.copy()  # Copy the test dataset to preserve its index
test_data_with_predictions['Predicted_Age'] = predictions  # Add the predicted values

# Keep the original index intact
test_data_with_predictions = test_data_with_predictions.reset_index(drop=False)  # Reset the index but keep it as a column

print(test_data_with_predictions[['index', 'Predicted_Age']].head())

test_features.head()

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Curves')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()